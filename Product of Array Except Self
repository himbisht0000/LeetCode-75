class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        
        //output vector
        vector<int> output(nums.size());

        // vector to store prefix and suffix
        // initialising all the elements of vector with one 
        //beacause first and and last index of prefix and suffix will be one respectively 
        vector<int> prefix(nums.size() , 1);
        vector<int> suffix(nums.size() , 1);
        
        //calcluate prefix
        //prefix[i] = contains the product of all the elements before nums[i] ( nums[i] is not included )
        for(int i = 1 ; i < prefix.size() ; i++)
        {
            prefix[i] = prefix[i - 1] * nums[i-1];
        }

        //calcluate suffix
        //suffix[i] = contains the product of all the elements after nums[i] ( nums[i] is not included )
        for(int i = suffix.size()-2 ; i >=0 ; i--)
        {
            suffix[i] = suffix[i + 1] * nums[i+1];
        }

        //store value in output vector
        for(int i = 0 ; i < output.size(); i++)
        {
            output[i] = prefix[i] * suffix[i];
        }

        return output;

    }
};
